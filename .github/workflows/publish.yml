name: publish-to-github-pages
on:
  push:
    branches:
      - main
      - "Task-*"
  pull_request:
    branches:
      - main
      - "Task-*"
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: false
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  issues: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js ⚙️ - Cache dependencies ⚡ - Install dependencies 🔧
        uses: ./.github/workflows/setup-node

      - name: Run TypeScript type check 🔍
        run: npm run type-check

      - name: Run ESLint 🔍
        run: npm run lint

  jest-tests:
    name: Jest Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js ⚙️ - Cache dependencies ⚡ - Install dependencies 🔧
        uses: ./.github/workflows/setup-node

      - name: Run Jest tests 🧪
        id: jest
        run: npm run test:ci
        continue-on-error: true

      - name: Comment PR with test results 💬
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if tests failed by looking at the jest step outcome
            const testsFailed = '${{ steps.jest.outcome }}' === 'failure';

            // Read test results
            let testSummary = `## 🧪 Jest Test Results\n\n`;

            if (testsFailed) {
              testSummary += '❌ **Tests Failed**\n\n';
              testSummary += 'Some tests did not pass. Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n';
            } else {
              testSummary += '✅ **All tests passed successfully!**\n\n';
            }

            try {
              // Check if coverage summary exists
              if (fs.existsSync('coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const total = coverage.total;
                
                testSummary += '### 📊 Coverage Summary\n\n';
                testSummary += '| Metric | Percentage | Status |\n';
                testSummary += '|--------|------------|--------|\n';
                
                const getStatus = (pct) => pct >= 80 ? '🟢' : pct >= 60 ? '🟡' : '🔴';
                
                testSummary += `| Statements | ${total.statements.pct}% | ${getStatus(total.statements.pct)} |\n`;
                testSummary += `| Branches | ${total.branches.pct}% | ${getStatus(total.branches.pct)} |\n`;
                testSummary += `| Functions | ${total.functions.pct}% | ${getStatus(total.functions.pct)} |\n`;
                testSummary += `| Lines | ${total.lines.pct}% | ${getStatus(total.lines.pct)} |\n\n`;
                
                // Add test counts
                testSummary += '### 🎯 Test Statistics\n\n';
                testSummary += `- **Total Files**: ${Object.keys(coverage).filter(k => k !== 'total').length}\n`;
                testSummary += `- **Lines Covered**: ${total.lines.covered}/${total.lines.total}\n`;
                testSummary += `- **Functions Covered**: ${total.functions.covered}/${total.functions.total}\n`;
                testSummary += `- **Branches Covered**: ${total.branches.covered}/${total.branches.total}\n\n`;
                
                // Add coverage threshold info
                testSummary += '### ⚙️ Coverage Requirements\n\n';
                testSummary += 'Current thresholds for CI: **40%** for all metrics\n\n';
              }
              
              if (!testsFailed) {
                testSummary += '🎉 **Ready to merge!** All quality checks passed.\n\n';
              } else {
                testSummary += '🔧 **Action required:** Please fix failing tests before merging.\n\n';
              }
              
              testSummary += `📋 **Full Details**: [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
              testSummary += `📊 **Coverage Report**: Available in Actions artifacts`;
              
            } catch (error) {
              testSummary += '⚠️ Could not read detailed coverage summary.\n\n';
              if (!testsFailed) {
                testSummary += '✅ **Tests completed successfully.**';
              }
            }

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🧪 Jest Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testSummary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testSummary
              });
            }

      - name: Upload test coverage 📊
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage-${{ github.run_number }}
          path: coverage/
          retention-days: 30

      - name: Fail job if tests failed 💥
        if: steps.jest.outcome == 'failure'
        run: exit 1

  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, jest-tests]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js ⚙️ - Cache dependencies ⚡ - Install dependencies 🔧
        uses: ./.github/workflows/setup-node

      - name: Cache Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build with Next.js 🏗️
        run: npx next build

      - name: Upload artifact 📡
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Publish to GitHub Pages 🚀
        id: deployment
        uses: actions/deploy-pages@v4
